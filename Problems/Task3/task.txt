 1. Define and Use a Structure
**Problem**: Define a structure `Book` with fields for title, author, and price. Create a book instance and print its details.

```c
#include <stdio.h>

struct Book {
    char title[50];
    char author[50];
    float price;
};

int main() {
    struct Book book1 = {"The Great Gatsby", "F. Scott Fitzgerald", 10.99};

    printf("Title: %s\n", book1.title);
    printf("Author: %s\n", book1.author);
    printf("Price: $%.2f\n", book1.price);

    return 0;
}
```

### 2. Array of Structures
**Problem**: Define a structure `Student` with fields for name and marks. Create an array of students and print their details.

```c
#include <stdio.h>

struct Student {
    char name[50];
    int marks;
};

int main() {
    struct Student students[3] = {
        {"Alice", 85},
        {"Bob", 90},
        {"Charlie", 78}
    };

    for (int i = 0; i < 3; i++) {
        printf("Name: %s, Marks: %d\n", students[i].name, students[i].marks);
    }

    return 0;
}
```

### 3. Structure with Nested Structure
**Problem**: Define a structure `Date` with fields for day, month, and year. Define a structure `Event` with fields for name and date (using `Date`). Print the event details.

```c
#include <stdio.h>

struct Date {
    int day;
    int month;
    int year;
};

struct Event {
    char name[50];
    struct Date date;
};

int main() {
    struct Event event = {"Birthday", {15, 7, 1992}};

    printf("Event: %s\n", event.name);
    printf("Date: %02d-%02d-%d\n", event.date.day, event.date.month, event.date.year);

    return 0;
}
```

### 4. Passing Structures to Functions
**Problem**: Define a structure `Rectangle` with fields for length and width. Write a function to calculate the area of a rectangle.

```c
#include <stdio.h>

struct Rectangle {
    float length;
    float width;
};

float calculateArea(struct Rectangle rect) {
    return rect.length * rect.width;
}

int main() {
    struct Rectangle rect = {10.5, 5.5};

    printf("Area: %.2f\n", calculateArea(rect));

    return 0;
}
```

### 5. Returning Structures from Functions
**Problem**: Define a structure `Point` with fields for x and y coordinates. Write a function to create a point.

```c
#include <stdio.h>

struct Point {
    int x;
    int y;
};

struct Point createPoint(int x, int y) {
    struct Point p = {x, y};
    return p;
}

int main() {
    struct Point p = createPoint(5, 10);

    printf("Point: (%d, %d)\n", p.x, p.y);

    return 0;
}
```

### 6. Pointer to Structure
**Problem**: Define a structure `Car` with fields for model and price. Use a pointer to access and modify the structure.

```c
#include <stdio.h>

struct Car {
    char model[50];
    float price;
};

int main() {
    struct Car car = {"Toyota", 20000.0};
    struct Car *ptr = &car;

    printf("Model: %s\n", ptr->model);
    printf("Price: %.2f\n", ptr->price);

    ptr->price = 22000.0;

    printf("Updated Price: %.2f\n", ptr->price);

    return 0;
}
```

### 7. Array of Structures with Dynamic Memory Allocation
**Problem**: Define a structure `Employee` with fields for name and salary. Dynamically allocate memory for an array of employees and print their details.

```c
#include <stdio.h>
#include <stdlib.h>

struct Employee {
    char name[50];
    float salary;
};

int main() {
    int n;
    printf("Enter the number of employees: ");
    scanf("%d", &n);

    struct Employee *employees = (struct Employee *)malloc(n * sizeof(struct Employee));

    for (int i = 0; i < n; i++) {
        printf("Enter name and salary of employee %d: ", i + 1);
        scanf("%s %f", employees[i].name, &employees[i].salary);
    }

    printf("\nEmployee Details:\n");
    for (int i = 0; i < n; i++) {
        printf("Name: %s, Salary: %.2f\n", employees[i].name, employees[i].salary);
    }

    free(employees);

    return 0;
}
```

### 8. Structure within Structure
**Problem**: Define a structure `Address` with fields for city and zip. Define a structure `Person` with fields for name and address (using `Address`). Print the person details.

```c
#include <stdio.h>

struct Address {
    char city[50];
    int zip;
};

struct Person {
    char name[50];
    struct Address address;
};

int main() {
    struct Person person = {"John Doe", {"New York", 10001}};

    printf("Name: %s\n", person.name);
    printf("City: %s\n", person.address.city);
    printf("ZIP: %d\n", person.address.zip);

    return 0;
}
```

### 9. Structure with Union
**Problem**: Define a structure `Data` with a union containing an int and a float. Print the union members.

```c
#include <stdio.h>

struct Data {
    union {
        int i;
        float f;
    } value;
    char type;
};

int main() {
    struct Data data;

    data.type = 'i';
    data.value.i = 42;

    if (data.type == 'i') {
        printf("Integer: %d\n", data.value.i);
    }

    data.type = 'f';
    data.value.f = 3.14;

    if (data.type == 'f') {
        printf("Float: %.2f\n", data.value.f);
    }

    return 0;
}
```

### 10. Structure for Linked List Node
**Problem**: Define a structure `Node` for a linked list with an integer data field and a pointer to the next node. Create and print a simple linked list.

```c
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};

void printList(struct Node *n) {
    while (n != NULL) {
        printf("%d -> ", n->data);
        n = n->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node *head = NULL;
    struct Node *second = NULL;
    struct Node *third = NULL;

    head = (struct Node *)malloc(sizeof(struct Node));
    second = (struct Node *)malloc(sizeof(struct Node));
    third = (struct Node *)malloc(sizeof(struct Node));

    head->data = 1;
    head->next = second;

    second->data = 2;
    second->next = third;

    third->data = 3;
    third->next = NULL;

    printList(head);

    return 0;
}
```

### 11. Structure for Stack Implementation
**Problem**: Define a structure `Stack` with an array and a top pointer. Implement basic stack operations: push and pop.

```c
#include <stdio.h>
#include <stdlib.h>

#define MAX 5

struct Stack {
    int arr[MAX];
    int top;
};

void push(struct Stack *s, int value) {
    if (s->top == MAX - 1) {
        printf("Stack Overflow\n");
    } else {
        s->arr[++(s->top)] = value;
    }
}

int pop(struct Stack *s) {
    if (s->top == -1) {
        printf("Stack Underflow\n");
        return -1;
    } else {
        return s->arr[(s->top)--];
    }
}

int main() {
    struct Stack stack = {.top = -1};

    push(&stack, 10);
    push(&stack, 20);
    push(&stack, 30);

    printf("Popped: %d\n", pop(&stack));
    printf("Popped: %d\n", pop(&stack));

    return 0;
}
```

### 12. Structure for Queue Implementation
**Problem**: Define a structure `Queue` with an array, front, and rear pointers. Implement basic queue operations: enqueue and dequeue.

```c
#include <stdio.h>
#include <stdlib.h>

#define MAX 5

struct Queue {
    int arr[MAX];
    int front;
    int rear;
};

void enqueue(struct Queue *q, int value) {
    if ((q->rear + 1) % MAX == q->front) {
        printf("Queue Overflow\n");
    } else {
        q->rear = (q->rear + 1) % MAX;
        q->arr[q->rear] = value;
    }
}

int dequeue(struct Queue *q) {
    if (q->front == q->rear) {
        printf("Queue

 Underflow\n");
        return -1;
    } else {
        q->front = (q->front + 1) % MAX;
        return q->arr[q->front];
    }
}

int main() {
    struct Queue queue = {.front = 0, .rear = 0};

    enqueue(&queue, 10);
    enqueue(&queue, 20);
    enqueue(&queue, 30);

    printf("Dequeued: %d\n", dequeue(&queue));
    printf("Dequeued: %d\n", dequeue(&queue));

    return 0;
}
```

### 13. Structure for Binary Tree Node
**Problem**: Define a structure `TreeNode` for a binary tree with an integer data field and pointers to left and right children. Create a simple binary tree and print its root node data.

```c
#include <stdio.h>
#include <stdlib.h>

struct TreeNode {
    int data;
    struct TreeNode *left;
    struct TreeNode *right;
};

struct TreeNode* createNode(int data) {
    struct TreeNode *newNode = (struct TreeNode *)malloc(sizeof(struct TreeNode));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

int main() {
    struct TreeNode *root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);

    printf("Root Node: %d\n", root->data);

    return 0;
}
```

### 14. Structure for Complex Number
**Problem**: Define a structure `Complex` with fields for real and imaginary parts. Write a function to add two complex numbers.

```c
#include <stdio.h>

struct Complex {
    float real;
    float imag;
};

struct Complex addComplex(struct Complex c1, struct Complex c2) {
    struct Complex result;
    result.real = c1.real + c2.real;
    result.imag = c1.imag + c2.imag;
    return result;
}

int main() {
    struct Complex c1 = {3.5, 2.5};
    struct Complex c2 = {1.5, 4.5};

    struct Complex sum = addComplex(c1, c2);

    printf("Sum: %.1f + %.1fi\n", sum.real, sum.imag);

    return 0;
}
```

### 15. Structure for Rational Number
**Problem**: Define a structure `Rational` with fields for numerator and denominator. Write a function to add two rational numbers.

```c
#include <stdio.h>

struct Rational {
    int numerator;
    int denominator;
};

struct Rational addRational(struct Rational r1, struct Rational r2) {
    struct Rational result;
    result.numerator = r1.numerator * r2.denominator + r2.numerator * r1.denominator;
    result.denominator = r1.denominator * r2.denominator;
    return result;
}

int main() {
    struct Rational r1 = {1, 2};
    struct Rational r2 = {1, 3};

    struct Rational sum = addRational(r1, r2);

    printf("Sum: %d/%d\n", sum.numerator, sum.denominator);

    return 0;
}
```

### 16. Structure for Time
**Problem**: Define a structure `Time` with fields for hours, minutes, and seconds. Write a function to add two times.

```c
#include <stdio.h>

struct Time {
    int hours;
    int minutes;
    int seconds;
};

struct Time addTime(struct Time t1, struct Time t2) {
    struct Time result;
    result.seconds = t1.seconds + t2.seconds;
    result.minutes = t1.minutes + t2.minutes + result.seconds / 60;
    result.hours = t1.hours + t2.hours + result.minutes / 60;
    result.minutes %= 60;
    result.seconds %= 60;
    return result;
}

int main() {
    struct Time t1 = {1, 45, 30};
    struct Time t2 = {2, 20, 40};

    struct Time sum = addTime(t1, t2);

    printf("Sum: %d:%d:%d\n", sum.hours, sum.minutes, sum.seconds);

    return 0;
}
```

### 17. Structure for Date Difference
**Problem**: Define a structure `Date` with fields for day, month, and year. Write a function to calculate the difference between two dates in days.

```c
#include <stdio.h>

struct Date {
    int day;
    int month;
    int year;
};

int calculateDays(struct Date date1, struct Date date2) {
    // For simplicity, assuming each month has 30 days and ignoring leap years
    int days1 = date1.year * 360 + date1.month * 30 + date1.day;
    int days2 = date2.year * 360 + date2.month * 30 + date2.day;
    return days2 - days1;
}

int main() {
    struct Date date1 = {1, 1, 2020};
    struct Date date2 = {1, 1, 2021};

    int difference = calculateDays(date1, date2);

    printf("Difference: %d days\n", difference);

    return 0;
}
```

### 18. Structure for Bank Account
**Problem**: Define a structure `BankAccount` with fields for account number, account holder name, and balance. Write a function to deposit money into the account.

```c
#include <stdio.h>

struct BankAccount {
    int accountNumber;
    char holderName[50];
    float balance;
};

void deposit(struct BankAccount *account, float amount) {
    account->balance += amount;
}

int main() {
    struct BankAccount account = {123456, "Alice", 1000.0};

    deposit(&account, 500.0);

    printf("Account Number: %d\n", account.accountNumber);
    printf("Holder Name: %s\n", account.holderName);
    printf("Balance: $%.2f\n", account.balance);

    return 0;
}
```

### 19. Structure for Book with ISBN
**Problem**: Define a structure `Book` with fields for title, author, price, and ISBN. Print the details of the book.

```c
#include <stdio.h>

struct Book {
    char title[50];
    char author[50];
    float price;
    char isbn[13];
};

int main() {
    struct Book book = {"The Great Gatsby", "F. Scott Fitzgerald", 10.99, "1234567890123"};

    printf("Title: %s\n", book.title);
    printf("Author: %s\n", book.author);
    printf("Price: $%.2f\n", book.price);
    printf("ISBN: %s\n", book.isbn);

    return 0;
}
```

### 20. Structure for Student with Grade
**Problem**: Define a structure `Student` with fields for name, marks, and grade. Write a function to assign a grade based on marks.

```c
#include <stdio.h>

struct Student {
    char name[50];
    int marks;
    char grade;
};

void assignGrade(struct Student *student) {
    if (student->marks >= 90) {
        student->grade = 'A';
    } else if (student->marks >= 80) {
        student->grade = 'B';
    } else if (student->marks >= 70) {
        student->grade = 'C';
    } else if (student->marks >= 60) {
        student->grade = 'D';
    } else {
        student->grade = 'F';
    }
}

int main() {
    struct Student student = {"Alice", 85};

    assignGrade(&student);

    printf("Name: %s\n", student.name);
    printf("Marks: %d\n", student.marks);
    printf("Grade: %c\n", student.grade);

    return 0;
}
```

### 21. Structure for Rectangle with Perimeter
**Problem**: Define a structure `Rectangle` with fields for length and width. Write a function to calculate the perimeter of the rectangle.

```c
#include <stdio.h>

struct Rectangle {
    float length;
    float width;
};

float calculatePerimeter(struct Rectangle rect) {
    return 2 * (rect.length + rect.width);
}

int main() {
    struct Rectangle rect = {10.5, 5.5};

    printf("Perimeter: %.2f\n", calculatePerimeter(rect));

    return 0;
}
```

### 22. Structure for Circle with Area
**Problem**: Define a structure `Circle` with a field for radius. Write a function to calculate the area of the circle.

```c
#include <stdio.h>

struct Circle {
    float radius;
};

float calculateArea(struct Circle circle) {
    return 3.14159 * circle.radius * circle.radius;
}

int main() {
    struct Circle circle = {5.5};

    printf("Area: %.2f\n", calculateArea(circle));

    return 0;
}
```

### 23. Structure for Person with Age Calculation
**Problem**: Define a structure `Person` with fields for name and birth year. Write a function to calculate the person's age based on the current year.

```c
#include <stdio.h>

struct Person {
    char name[50];
    int birthYear;
};

int calculateAge(struct Person person, int currentYear) {
    return currentYear - person.birthYear;
}

int main()

 {
    struct Person person = {"John Doe", 1990};

    int age = calculateAge(person, 2021);

    printf("Name: %s\n", person.name);
    printf("Age: %d\n", age);

    return 0;
}
```

### 24. Structure for Product with Discount
**Problem**: Define a structure `Product` with fields for name, price, and discount. Write a function to calculate the discounted price.

```c
#include <stdio.h>

struct Product {
    char name[50];
    float price;
    float discount;
};

float calculateDiscountedPrice(struct Product product) {
    return product.price - (product.price * product.discount / 100);
}

int main() {
    struct Product product = {"Laptop", 1000.0, 10.0};

    printf("Original Price: $%.2f\n", product.price);
    printf("Discounted Price: $%.2f\n", calculateDiscountedPrice(product));

    return 0;
}
```

### 25. Structure for Employee with Bonus
**Problem**: Define a structure `Employee` with fields for name, salary, and bonus. Write a function to calculate the total salary including the bonus.

```c
#include <stdio.h>

struct Employee {
    char name[50];
    float salary;
    float bonus;
};

float calculateTotalSalary(struct Employee employee) {
    return employee.salary + employee.bonus;
}

int main() {
    struct Employee employee = {"Alice", 50000.0, 5000.0};

    printf("Name: %s\n", employee.name);
    printf("Total Salary: $%.2f\n", calculateTotalSalary(employee));

    return 0;
}
```

These examples cover a range of basic operations with structures in C, including defining structures, using arrays and pointers with structures, and creating functions to manipulate and utilize structure data.